[
  {
    "title": "Java или Node.js?",
    "description": "Добрый день, какой язык/технологию программирования учить? Я студент, в этом году заканчиваю универ. Надо уже бы искать работу. Учил в последнее время Java, сейчас читаю уроки по JavaFX. Недавно написали из компании в моем городе, что нужен JS программист (писать на MeteorJS фреймворке), я собеседование не прошел, сказали учить еще 1-2 месяца Node.js, Meteor и тд. Смотрел вчера рынок фриланса там очень много заказов по JS, а по Java почилал по форумах что фриланс редкий только Enterprise долгосрочные проекты. В нашем городе работы по Java нет. Стоит ли прерывать изучение Java и учить MeteorJS? А если даже не пойду на работу, то буду фрилансить. А на следующий год хотелось бы пойти в бульшую компанию (SoftServe) на курсы Java. Что выбрать? Спасибо",
    "labels": [
      "Java",
      "JavaScript"
    ]
  },
  {
    "title": "Введение в React и Redux для бекенд-разработчиков",
    "description": "Если вы как я долгое время считали, что JavaScript – это такой «игрушечный» язык на котором пишут анимашки для менюшек и падающие снежинки на форумах под новый год, а потом очнулись в 2016 году с мыслями WTF: react, flux redux, webpack, babel,… не отчаивайтесь. Вы не одиноки. Материалов по современному фронтенду в сети много, даже слишком много. Под катом еще одно альтернативное мнение о том, каково это учить JavaScript в 2016 году. Итак, нам потребуются: React, React Dev Tools, React-Hot-Loader, React-Router, Thunk, Redux, Redux Dev Tools, Semantic-UI, Webpack, Babel и npm. На первый взгляд много. Сравним с бекендом: MVC-фреймворк, ORM, Data Mapper, IOC-контейнер, логер, профайлер, очереди, управление конфигурациями, сборка и выкладка… Список можно продолжить, но думаю идея понятна и так: с ростом сложности решаемых задач растет и сложность инструментов. Все чаще мы употребляем термин Web App вместо Web Site, акцентируя внимание на богатых возможностях современных веб-приложений.",
    "labels": [
      "JavaScript",
      "React",
      "React",
      "Node.js",
      "Web"
    ]
  },
  {
    "title": "Webpack",
    "description": "Так, то есть пишем мы на ES6 + JSX, а в бразуере выполняется минифицированный JS. Все это напоминает историю изобретения высокоуровневых ЯП. Люди могли писать более эффективные программы на ассемблере, но предпочли удобство и продуктивность. Раз есть исходники и компилятор (транспилятор в нашем случае), то потребуется и система сборки. Если в вашей пещере было достаточно тепло и уютно, возможно, названия grunt и gulp вам ничего не говорят. Что к лучшему. На данный момент, можно считать (слава богу), что для JS есть только один сборщик – Webpack — оставивший конкурентов позади. Можно считать, что webpack — аналог maven или msbuild (кому что ближе) в мире фронтэнда. Не смотря на то что, конфиги webpack’а на первый взгляд напоминают некромантские свитки, через какое-то время привыкаешь. Наверное, каждый любитель фронтенда должен хотя-бы раз в своей жизни написать tutorial по настройке webpack, также как каждый фанат ФП – tutorial по монадам. Что нужно знать про webpack: Вам потребуется кто-то, кто умеет его настраивать npm start — для запуска dev-сервера npm run build для сборки фронта на продакшн Вообще Webpack собирает не только JS, но еще и sass, svg, шрифты и вообще все что душе угодно, но я пока еще не готов написать полноценный туториал, так что поищите на просторах интернета. angular, python",
    "labels": [
      "JavaScript",
      "Python",
      "Node.js",
      "Node.js"
    ]
  }
]